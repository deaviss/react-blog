{"id":"../node_modules/hyphen/hyphen.js","dependencies":[{"name":"C:\\Users\\Muminek\\Desktop\\project-1-react\\package.json","includedInParent":true,"mtime":1555774236866},{"name":"C:\\Users\\Muminek\\Desktop\\project-1-react\\.babelrc","includedInParent":true,"mtime":1555086814215},{"name":"C:\\Users\\Muminek\\Desktop\\project-1-react\\node_modules\\hyphen\\package.json","includedInParent":true,"mtime":1555774236498}],"generated":{"js":"var define;\n/** Franklin M. Liang's hyphenation algorithm, implemented in Javascript.\n *  Copyright (C) 2016 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the MIT license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function() {\n  var // settings\n    SETTING_DEBUG = false,\n    SETTING_HYPHEN_CHAR = \"\\u00AD\";\n\n  function hyphenateWord(text, patterns, debug, hyphenChar) {\n    var pattern,\n      patternData,\n      patternIndex = 0;\n\n    var p = [];\n\n    var levels = new Array(text.length + 1);\n\n    for (var i = levels.length; i--; ) levels[i] = 0;\n\n    while ((patternData = patterns[patternIndex++])) {\n      var patternEntityIndex = text\n        .toLocaleLowerCase()\n        .indexOf(patternData.text);\n\n      var patternFits =\n        patternEntityIndex > -1 &&\n        (patternData.stickToLeft ? patternEntityIndex === 0 : true) &&\n        (patternData.stickToRight\n          ? patternEntityIndex + patternData.text.length === text.length\n          : true);\n\n      if (patternFits) {\n        p.push(patternData.pattern + \">\" + patternData.levels.join(\"\"));\n\n        for (var i = 0; i < patternData.levels.length; i++)\n          levels[patternEntityIndex + i] = Math.max(\n            patternData.levels[i],\n            levels[patternEntityIndex + i]\n          );\n      }\n    }\n\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[\n      levels.length - 2\n    ] = 0;\n\n    var hyphenatedText = \"\",\n      leveledText = \"\",\n      debugHyphenatedText = \"\";\n\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText +=\n        (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n      debugHyphenatedText += (levels[i] % 2 === 1 ? \"-\" : \"\") + text.charAt(i);\n      leveledText += (levels[i] > 0 ? levels[i] : \"\") + text.charAt(i);\n    }\n\n    if (debug)\n      console.log.apply(\n        console,\n        [text, \"->\"]\n          .concat(p)\n          .concat([\"->\"])\n          .concat(levels)\n          .concat([\"->\", leveledText])\n          .concat([\"->\", debugHyphenatedText])\n      );\n\n    return hyphenatedText;\n  }\n\n  function iterateSourceText(text) {\n    var nextCharIndex = 0;\n\n    var states = { readWord: 1, returnWord: 2, returnChar: 3 };\n\n    return {\n      next: function() {\n        var nextChar,\n          nextWord = \"\";\n\n        while ((nextChar = text.charAt(nextCharIndex++))) {\n          var charIsSpaceOrSpecial = /\\s|[\\!-\\@\\[-\\`\\{-\\xbf]/.test(nextChar);\n\n          var state = !charIsSpaceOrSpecial\n            ? states.readWord\n            : state === states.readWord\n              ? states.returnWord\n              : states.returnChar;\n\n          switch (state) {\n            case states.readWord:\n              nextWord += nextChar;\n              break;\n\n            case states.returnWord:\n              nextCharIndex--;\n              return nextWord;\n\n            case states.returnChar:\n              return nextChar;\n          }\n        }\n        if (nextWord !== \"\") {\n          return nextWord;\n        }\n      }\n    };\n  }\n\n  function start(text, patterns, cache, debug, hyphenChar) {\n    var newText = \"\",\n      nextWord,\n      readWord = iterateSourceText(text),\n      states = { hyphenateWord: 1, concatenate: 2 },\n      processedN = 0,\n      hyphenatedN = 0;\n\n    while ((nextWord = readWord.next())) {\n      var state =\n        nextWord.length > 4 ? states.hyphenateWord : states.concatenate;\n\n      switch (state) {\n        case states.hyphenateWord:\n          if (!cache[nextWord])\n            cache[nextWord] = hyphenateWord(\n              nextWord,\n              patterns,\n              debug,\n              hyphenChar\n            );\n\n          if (nextWord !== cache[nextWord]) hyphenatedN++;\n\n          nextWord = cache[nextWord];\n\n        case states.concatenate:\n          newText += nextWord;\n      }\n\n      processedN++;\n    }\n\n    if (debug)\n      console.log(\n        \"----------------\\nHyphenation stats: \" +\n          processedN +\n          \" words processed, \" +\n          hyphenatedN +\n          \" words hyphenated\"\n      );\n\n    return newText;\n  }\n\n  // extract useful data from pattern\n  function preprocessPattern(pattern) {\n    var patternCharIndex = 0,\n      patternChar,\n      patternData = {\n        pattern: pattern,\n        text: \"\",\n        levels: [],\n        stickToLeft: 0,\n        stickToRight: 0\n      },\n      states = { alphabet: 1, level: 2, stickToLeft: 3, stickToRight: 4 };\n\n    while ((patternChar = pattern.charAt(patternCharIndex++))) {\n      var charIsDot = patternChar === \".\",\n        charIsNumber = !charIsDot && /\\d/.test(patternChar),\n        state = charIsDot\n          ? patternCharIndex - 1 === 0\n            ? states.stickToLeft\n            : states.stickToRight\n          : charIsNumber\n            ? states.level\n            : states.alphabet;\n\n      switch (state) {\n        case states.alphabet:\n          !prevCharIsNumber && patternData.levels.push(0);\n          patternData.text += patternChar;\n          break;\n\n        case states.level:\n          patternData.levels.push(parseInt(patternChar));\n          break;\n\n        case states.stickToLeft:\n          patternData.stickToLeft = true;\n          break;\n\n        case states.stickToRight:\n          patternData.stickToRight = true;\n          break;\n      }\n\n      var prevCharIsNumber = charIsNumber;\n    }\n\n    return patternData;\n  }\n\n  function purifyPatterns(text) {\n    return (\n      text\n        // Remove comments\n        .replace(/%.*/g, \"\")\n        // Remove repeating spaces\n        .replace(/\\s+/g, \" \")\n        // Trim spaces\n        .replace(/^\\s|\\s$/g, \"\")\n        // Split to Array\n        .split(\" \")\n    );\n  }\n\n  // Hyphenator factory\n  return function(patternsDefinition, settings) {\n    var // Settings\n      debug =\n        (settings && settings.debug !== undefined && settings.debug) ||\n        SETTING_DEBUG,\n      hyphenChar =\n        (settings &&\n          settings.hyphenChar !== undefined &&\n          settings.hyphenChar) ||\n        SETTING_HYPHEN_CHAR,\n      cache = {},\n      // Preprocess patterns\n      patterns = (patternsDefinition.patterns.splice\n        ? patternsDefinition.patterns\n        : purifyPatterns(patternsDefinition.patterns)\n      ).map(function(pattern) {\n        return preprocessPattern(pattern);\n      });\n    // Prepare cache\n    (patternsDefinition.exceptions.splice\n      ? patternsDefinition.exceptions\n      : purifyPatterns(patternsDefinition.exceptions)\n    ).forEach(function(exception) {\n      cache[exception.replace(/\\-/g, \"\")] = exception.replace(\n        /\\-/g,\n        hyphenChar\n      );\n    });\n\n    // Hyphenator function\n    return function(text) {\n      return start(text, patterns, cache, debug, hyphenChar);\n    };\n  };\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/hyphen/hyphen.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/hyphen/hyphen.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}}],"sources":{"../node_modules/hyphen/hyphen.js":"/** Franklin M. Liang's hyphenation algorithm, implemented in Javascript.\n *  Copyright (C) 2016 Yevhen Tiurin (yevhentiurin@gmail.com)\n *  https://github.com/ytiurin/hyphen\n *\n *  Released under the MIT license\n *  https://github.com/ytiurin/hyphen/blob/master/LICENSE\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root.createHyphenator = factory();\n  }\n})(this, function() {\n  var // settings\n    SETTING_DEBUG = false,\n    SETTING_HYPHEN_CHAR = \"\\u00AD\";\n\n  function hyphenateWord(text, patterns, debug, hyphenChar) {\n    var pattern,\n      patternData,\n      patternIndex = 0;\n\n    var p = [];\n\n    var levels = new Array(text.length + 1);\n\n    for (var i = levels.length; i--; ) levels[i] = 0;\n\n    while ((patternData = patterns[patternIndex++])) {\n      var patternEntityIndex = text\n        .toLocaleLowerCase()\n        .indexOf(patternData.text);\n\n      var patternFits =\n        patternEntityIndex > -1 &&\n        (patternData.stickToLeft ? patternEntityIndex === 0 : true) &&\n        (patternData.stickToRight\n          ? patternEntityIndex + patternData.text.length === text.length\n          : true);\n\n      if (patternFits) {\n        p.push(patternData.pattern + \">\" + patternData.levels.join(\"\"));\n\n        for (var i = 0; i < patternData.levels.length; i++)\n          levels[patternEntityIndex + i] = Math.max(\n            patternData.levels[i],\n            levels[patternEntityIndex + i]\n          );\n      }\n    }\n\n    levels[0] = levels[1] = levels[levels.length - 1] = levels[\n      levels.length - 2\n    ] = 0;\n\n    var hyphenatedText = \"\",\n      leveledText = \"\",\n      debugHyphenatedText = \"\";\n\n    for (var i = 0; i < levels.length; i++) {\n      hyphenatedText +=\n        (levels[i] % 2 === 1 ? hyphenChar : \"\") + text.charAt(i);\n      debugHyphenatedText += (levels[i] % 2 === 1 ? \"-\" : \"\") + text.charAt(i);\n      leveledText += (levels[i] > 0 ? levels[i] : \"\") + text.charAt(i);\n    }\n\n    if (debug)\n      console.log.apply(\n        console,\n        [text, \"->\"]\n          .concat(p)\n          .concat([\"->\"])\n          .concat(levels)\n          .concat([\"->\", leveledText])\n          .concat([\"->\", debugHyphenatedText])\n      );\n\n    return hyphenatedText;\n  }\n\n  function iterateSourceText(text) {\n    var nextCharIndex = 0;\n\n    var states = { readWord: 1, returnWord: 2, returnChar: 3 };\n\n    return {\n      next: function() {\n        var nextChar,\n          nextWord = \"\";\n\n        while ((nextChar = text.charAt(nextCharIndex++))) {\n          var charIsSpaceOrSpecial = /\\s|[\\!-\\@\\[-\\`\\{-\\xbf]/.test(nextChar);\n\n          var state = !charIsSpaceOrSpecial\n            ? states.readWord\n            : state === states.readWord\n              ? states.returnWord\n              : states.returnChar;\n\n          switch (state) {\n            case states.readWord:\n              nextWord += nextChar;\n              break;\n\n            case states.returnWord:\n              nextCharIndex--;\n              return nextWord;\n\n            case states.returnChar:\n              return nextChar;\n          }\n        }\n        if (nextWord !== \"\") {\n          return nextWord;\n        }\n      }\n    };\n  }\n\n  function start(text, patterns, cache, debug, hyphenChar) {\n    var newText = \"\",\n      nextWord,\n      readWord = iterateSourceText(text),\n      states = { hyphenateWord: 1, concatenate: 2 },\n      processedN = 0,\n      hyphenatedN = 0;\n\n    while ((nextWord = readWord.next())) {\n      var state =\n        nextWord.length > 4 ? states.hyphenateWord : states.concatenate;\n\n      switch (state) {\n        case states.hyphenateWord:\n          if (!cache[nextWord])\n            cache[nextWord] = hyphenateWord(\n              nextWord,\n              patterns,\n              debug,\n              hyphenChar\n            );\n\n          if (nextWord !== cache[nextWord]) hyphenatedN++;\n\n          nextWord = cache[nextWord];\n\n        case states.concatenate:\n          newText += nextWord;\n      }\n\n      processedN++;\n    }\n\n    if (debug)\n      console.log(\n        \"----------------\\nHyphenation stats: \" +\n          processedN +\n          \" words processed, \" +\n          hyphenatedN +\n          \" words hyphenated\"\n      );\n\n    return newText;\n  }\n\n  // extract useful data from pattern\n  function preprocessPattern(pattern) {\n    var patternCharIndex = 0,\n      patternChar,\n      patternData = {\n        pattern: pattern,\n        text: \"\",\n        levels: [],\n        stickToLeft: 0,\n        stickToRight: 0\n      },\n      states = { alphabet: 1, level: 2, stickToLeft: 3, stickToRight: 4 };\n\n    while ((patternChar = pattern.charAt(patternCharIndex++))) {\n      var charIsDot = patternChar === \".\",\n        charIsNumber = !charIsDot && /\\d/.test(patternChar),\n        state = charIsDot\n          ? patternCharIndex - 1 === 0\n            ? states.stickToLeft\n            : states.stickToRight\n          : charIsNumber\n            ? states.level\n            : states.alphabet;\n\n      switch (state) {\n        case states.alphabet:\n          !prevCharIsNumber && patternData.levels.push(0);\n          patternData.text += patternChar;\n          break;\n\n        case states.level:\n          patternData.levels.push(parseInt(patternChar));\n          break;\n\n        case states.stickToLeft:\n          patternData.stickToLeft = true;\n          break;\n\n        case states.stickToRight:\n          patternData.stickToRight = true;\n          break;\n      }\n\n      var prevCharIsNumber = charIsNumber;\n    }\n\n    return patternData;\n  }\n\n  function purifyPatterns(text) {\n    return (\n      text\n        // Remove comments\n        .replace(/%.*/g, \"\")\n        // Remove repeating spaces\n        .replace(/\\s+/g, \" \")\n        // Trim spaces\n        .replace(/^\\s|\\s$/g, \"\")\n        // Split to Array\n        .split(\" \")\n    );\n  }\n\n  // Hyphenator factory\n  return function(patternsDefinition, settings) {\n    var // Settings\n      debug =\n        (settings && settings.debug !== undefined && settings.debug) ||\n        SETTING_DEBUG,\n      hyphenChar =\n        (settings &&\n          settings.hyphenChar !== undefined &&\n          settings.hyphenChar) ||\n        SETTING_HYPHEN_CHAR,\n      cache = {},\n      // Preprocess patterns\n      patterns = (patternsDefinition.patterns.splice\n        ? patternsDefinition.patterns\n        : purifyPatterns(patternsDefinition.patterns)\n      ).map(function(pattern) {\n        return preprocessPattern(pattern);\n      });\n    // Prepare cache\n    (patternsDefinition.exceptions.splice\n      ? patternsDefinition.exceptions\n      : purifyPatterns(patternsDefinition.exceptions)\n    ).forEach(function(exception) {\n      cache[exception.replace(/\\-/g, \"\")] = exception.replace(\n        /\\-/g,\n        hyphenChar\n      );\n    });\n\n    // Hyphenator function\n    return function(text) {\n      return start(text, patterns, cache, debug, hyphenChar);\n    };\n  };\n});\n"},"lineCount":273}},"error":null,"hash":"c4e862b70e2297c94e377cdabaecab7c","cacheData":{"env":{}}}